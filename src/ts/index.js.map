{"version":3,"sources":["Food.ts","BaseMob.ts","Mob.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["import {getXY} from \"./index\";\r\n\r\nexport class Food {\r\n    private readonly id: string;\r\n    public x: number;\r\n    public y: number;\r\n    public w: number;\r\n    public h: number;\r\n    public color: string;\r\n    private readonly context: CanvasRenderingContext2D | null;\r\n\r\n    constructor(x: number, y: number, ctx: CanvasRenderingContext2D | null) {\r\n        this.id = `${Math.random()}.${Date.now()}`\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = '#1199ff';\r\n        this.w = 20;\r\n        this.h = 20;\r\n        this.context = ctx;\r\n    }\r\n\r\n    public draw() {\r\n        if (this.context) {\r\n            let image = new Image();\r\n            image.src = 'food.png';\r\n            this.context.drawImage(image,this.x, this.y, this.w, this.h);\r\n        }\r\n    }\r\n    public static spawn(ctx: CanvasRenderingContext2D | null) {\r\n        const coords = getXY();\r\n        return new Food(coords.x, coords.y, ctx)\r\n    }\r\n\r\n}\r\n","import {Food} from \"./Food\";\r\n\r\nexport abstract class BaseMob {\r\n    protected canvasWidth: number;\r\n    protected canvasHeight: number;\r\n\r\n    protected constructor(canvW: number, canvH: number) {\r\n        this.canvasWidth = canvW;\r\n        this.canvasHeight = canvH;\r\n    }\r\n\r\n    public abstract draw(): void;\r\n    public abstract checkIsDie(iteration: number): void;\r\n    public abstract updateCoords(x: number, y: number): void;\r\n    public abstract goToClosestFood(foods: Food[]): void;\r\n\r\n}\r\n","import { CANVAS_HEIGHT, CANVAS_WIDTH, getXY } from \".\";\r\nimport { BaseMob } from \"./BaseMob\";\r\nimport {Food} from \"./Food\";\r\nclass Mob extends BaseMob {\r\n    private readonly id: string;\r\n    private readonly context: CanvasRenderingContext2D | null;\r\n    public w: number;\r\n    public h: number;\r\n    public x: number;\r\n    public y: number;\r\n    public isPresent: boolean;\r\n    public countOfIterationUntilDie: number;\r\n    public countOfIterationUntilBornNew: number;\r\n    public color: string;\r\n    public daysOfLife: number;\r\n    constructor(x: number, y: number, canvW: number, canvH: number, ctx:  CanvasRenderingContext2D | null) {\r\n        super(canvW, canvH);\r\n        this.id = `${Math.random()}.${Date.now()}`\r\n        this.x = x;\r\n        this.y = y;\r\n        this.isPresent = true;\r\n        this.countOfIterationUntilDie = 10;\r\n        this.countOfIterationUntilBornNew = 5;\r\n        this.color = '#000000'\r\n        this.w = 50;\r\n        this.h = 50;\r\n        this.context = ctx;\r\n        this.daysOfLife = 0;\r\n    }\r\n\r\n    public static spawn(ctx: CanvasRenderingContext2D | null) {\r\n        const coords = getXY();\r\n        return new Mob(coords.x, coords.y, CANVAS_WIDTH, CANVAS_HEIGHT, ctx)\r\n    }\r\n\r\n    public getXY() {\r\n        return {\r\n            x: Math.round(Math.random() * CANVAS_WIDTH) + 1,\r\n            y: Math.round(Math.random() * CANVAS_HEIGHT) + 1\r\n        }\r\n    }\r\n\r\n    public override draw() {\r\n        if (this.context) {\r\n            let image = new Image();\r\n            image.src = 'amongus.webp';\r\n            this.context.drawImage(image,this.x, this.y, this.w, this.h);\r\n        }\r\n        this.daysOfLife++;\r\n    }\r\n\r\n    public override checkIsDie(iteration: number): void {\r\n        if (iteration  % 300 === 0) {\r\n            this.countOfIterationUntilDie--;\r\n        }\r\n        if (this.countOfIterationUntilDie === 0) {\r\n            this.isPresent = false;\r\n        }\r\n    }\r\n\r\n\r\n    public override goToClosestFood(foods: Food[]): void {\r\n        if (foods.length === 0) {\r\n            return;\r\n        }\r\n        const filteredFood = foods.filter((el) => {\r\n            let dx = el.x - this.x;\r\n            let dy = el.y - this.y;\r\n            let distance = Math.sqrt(dx * dx + dy * dy);\r\n            console.log('dst', dx, dy, distance)\r\n            return distance <= 120;\r\n        })\r\n        if (filteredFood.length === 0) {\r\n            const first = foods[Math.floor(Math.random() * filteredFood.length)];\r\n            console.log(first)\r\n            console.log(this.x, this.y, first)\r\n            let dx = first.x - this.x;\r\n            let dy = first.y - this.y;\r\n            let distance = Math.sqrt(dx * dx + dy * dy);\r\n            let normalizedDx = dx / distance;\r\n            let normalizedDy = dy / distance;\r\n            let moveDistance = 60;\r\n            this.x += Math.round(normalizedDx * moveDistance);\r\n            this.y += Math.round(normalizedDy * moveDistance);\r\n            console.log(dx, dy, distance, normalizedDx, normalizedDy, this.x, this.y)\r\n            if (this.countOfIterationUntilDie) {\r\n                this.countOfIterationUntilDie--\r\n            }\r\n            console.log(123);\r\n\r\n        } else if (filteredFood.length === 1) {\r\n            this.x = filteredFood[0].x;\r\n            this.y = filteredFood[0].y;\r\n            foods = foods.filter((el) => el !== filteredFood[0])\r\n            if (this.countOfIterationUntilBornNew) {\r\n                this.countOfIterationUntilBornNew--;\r\n            }\r\n            this.countOfIterationUntilDie += 10;\r\n            console.log(256);\r\n        } else {\r\n            const delta = foods[Math.floor(Math.random() * filteredFood.length)]\r\n            this.x = delta.x;\r\n            this.y = delta.y;\r\n            foods = foods.filter((el) => el !== delta)\r\n            if (this.countOfIterationUntilBornNew) {\r\n                this.countOfIterationUntilBornNew--;\r\n            }\r\n            this.countOfIterationUntilDie += 10;\r\n\r\n            console.log(384);\r\n        }\r\n\r\n    }\r\n    public override updateCoords(x: number, y: number): void {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport { Mob };\r\n","import {Food} from \"./Food\";\r\nimport {Mob} from \"./Mob\";\r\n\r\nlet entities: Mob[] = [];\r\nlet foods: Food[] = [];\r\nexport const CANVAS_WIDTH = 1280;\r\nexport const CANVAS_HEIGHT = 800;\r\nconst counterMobs = document.querySelector('.count_of_mobs');\r\nconst counterFood = document.querySelector('.count_of_food');\r\n\r\nexport function getXY() {\r\n    return {\r\n        x: Math.round(Math.random() * CANVAS_WIDTH) + 1,\r\n        y: Math.round(Math.random() * CANVAS_HEIGHT) + 1\r\n    }\r\n}\r\n\r\n\r\n\r\n(function Runnable() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    let iteration = 0;\r\n    function redraw() {\r\n        ctx!.clearRect(0,0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n        for (let i = 0; i < foods.length; i++) {\r\n            foods[i].draw();\r\n        }\r\n        for (let i = 0; i < entities.length; i++) {\r\n            entities[i].draw();\r\n        }\r\n    }\r\n\r\n    setInterval(() => {\r\n        if (counterMobs && counterFood) {\r\n            counterMobs.innerHTML = String(entities.length);\r\n            counterFood.innerHTML = String(foods.length);\r\n        }\r\n        if (iteration === 0) {\r\n            entities.push(Mob.spawn(ctx));\r\n        }\r\n            if (iteration > 0 && iteration % 5 === 0) {\r\n                for (let i = 0; i < entities.length; i++) {\r\n                    entities[i].goToClosestFood(foods);\r\n                    if (entities[i].countOfIterationUntilBornNew === 0) {\r\n                        entities.push(Mob.spawn(ctx))\r\n                        entities[i].countOfIterationUntilBornNew = 5;\r\n                    }\r\n                        entities = entities.filter((el) => el.countOfIterationUntilDie !== 0);\r\n                }\r\n            }\r\n            if (iteration % 10 === 0) {\r\n                foods.push(Food.spawn(ctx))\r\n            }\r\n            redraw();\r\n        iteration++;\r\n    }, 100)\r\n})();\r\n"]}